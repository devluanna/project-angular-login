{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth-service\";\nexport class LoginService {\n  constructor(httpClient, authService // Injete o AuthService\n  ) {\n    this.httpClient = httpClient;\n    this.authService = authService;\n    this.apiUrl = \"http://localhost:8080/auth\";\n  }\n  login(identity, password) {\n    return this.httpClient.post(`${this.apiUrl}/login`, {\n      identity,\n      password\n    }).pipe(tap(response => {\n      sessionStorage.setItem(\"auth-token\", response.token);\n      sessionStorage.setItem(\"userId\", response.id_user.toString());\n      this.authService.setUser(response.first_name, response.last_name);\n      console.log(\"first_name\", response.first_name);\n      console.log(\"last_name\", response.last_name);\n      console.log(\"token\", response.token);\n      console.log(\"id_user\", response.id_user);\n    }));\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","LoginService","constructor","httpClient","authService","apiUrl","login","identity","password","post","pipe","response","sessionStorage","setItem","token","id_user","toString","setUser","first_name","last_name","console","log","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\services\\login-service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs';\r\nimport { AuthService } from './auth-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  apiUrl: string = \"http://localhost:8080/auth\";\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private authService: AuthService // Injete o AuthService\r\n  ) { }\r\n  \r\n  login(identity: string, password: string){\r\n    return this.httpClient.post<any>(`${this.apiUrl}/login`, { identity, password }).pipe(\r\n      tap((response) => {\r\n        sessionStorage.setItem(\"auth-token\", response.token);\r\n        sessionStorage.setItem(\"userId\", response.id_user.toString());\r\n        this.authService.setUser(response.first_name, response.last_name);\r\n        console.log(\"first_name\", response.first_name);\r\n        console.log(\"last_name\", response.last_name);\r\n        console.log(\"token\", response.token);\r\n        console.log(\"id_user\", response.id_user);\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"AAEA,SAASA,GAAG,QAAQ,MAAM;;;;AAM1B,OAAM,MAAOC,YAAY;EAGvBC,YACUC,UAAsB,EACtBC,WAAwB,CAAC;EAAA,E;IADzB,KAAAD,UAAU,GAAVA,UAAU;IACV,KAAAC,WAAW,GAAXA,WAAW;IAJrB,KAAAC,MAAM,GAAW,4BAA4B;EAKzC;EAEJC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAAM,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACnFV,GAAG,CAAEW,QAAQ,IAAI;MACfC,cAAc,CAACC,OAAO,CAAC,YAAY,EAAEF,QAAQ,CAACG,KAAK,CAAC;MACpDF,cAAc,CAACC,OAAO,CAAC,QAAQ,EAAEF,QAAQ,CAACI,OAAO,CAACC,QAAQ,EAAE,CAAC;MAC7D,IAAI,CAACZ,WAAW,CAACa,OAAO,CAACN,QAAQ,CAACO,UAAU,EAAEP,QAAQ,CAACQ,SAAS,CAAC;MACjEC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEV,QAAQ,CAACO,UAAU,CAAC;MAC9CE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEV,QAAQ,CAACQ,SAAS,CAAC;MAC5CC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEV,QAAQ,CAACG,KAAK,CAAC;MACpCM,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEV,QAAQ,CAACI,OAAO,CAAC;IAC1C,CAAC,CAAC,CACH;EACH;EAAC,QAAAO,CAAA,G;qBApBUrB,YAAY,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ5B,YAAY;IAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}