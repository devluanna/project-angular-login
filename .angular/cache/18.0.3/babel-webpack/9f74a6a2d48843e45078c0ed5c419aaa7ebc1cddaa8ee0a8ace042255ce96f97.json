{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { InputComponent } from '../input/input.component';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RecoveryPasswordService } from 'src/app/services/recovery-password';\nimport { ModalDefaultComponent } from '../modal-default/modal-default.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/recovery-password\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction ModalRecoveryPasswordComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"form\", 3)(2, \"app-input\", 4);\n    i0.ɵɵelement(3, \"img\", 5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.recoveryPasswordForm);\n  }\n}\nexport class ModalRecoveryPasswordComponent {\n  constructor(router, recoveryPasswordService, toastService) {\n    this.router = router;\n    this.recoveryPasswordService = recoveryPasswordService;\n    this.toastService = toastService;\n    this.recoveryPasswordForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email])\n    });\n  }\n  submit() {\n    this.recoveryPasswordService.recoveryPassword(this.recoveryPasswordForm.value.email).subscribe({\n      next: () => {\n        this.toastService.success(\"Email successfully sent!!\");\n        //this.router.navigate(['user']);\n      },\n      error: () => this.toastService.error(\"Unexpected error! Try again later\")\n    });\n  }\n  static #_ = this.ɵfac = function ModalRecoveryPasswordComponent_Factory(t) {\n    return new (t || ModalRecoveryPasswordComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.RecoveryPasswordService), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModalRecoveryPasswordComponent,\n    selectors: [[\"app-modal-recovery-password\"]],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([RecoveryPasswordService]), i0.ɵɵStandaloneFeature],\n    decls: 2,\n    vars: 1,\n    consts: [[\"title\", \"Forgot your password?\", \"primaryBtnText\", \"cancel\", \"secondaryBtnText\", \"send\", 3, \"submit\", \"closeModal\"], [\"class\", \"custom-modal\", 4, \"ngIf\"], [1, \"custom-modal\"], [3, \"formGroup\"], [\"formControlName\", \"email\", \"inputName\", \"email\", \"type\", \"email\", \"label\", \"\", \"placeholder\", \"email@email.com\"], [\"src\", \"/assets/svg/signup-input/mail.svg\"]],\n    template: function ModalRecoveryPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-modal-default\", 0);\n        i0.ɵɵlistener(\"submit\", function ModalRecoveryPasswordComponent_Template_app_modal_default_submit_0_listener() {\n          return ctx.submit();\n        })(\"closeModal\", function ModalRecoveryPasswordComponent_Template_app_modal_default_closeModal_0_listener() {\n          return ctx.closeModal();\n        });\n        i0.ɵɵtemplate(1, ModalRecoveryPasswordComponent_div_1_Template, 4, 1, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n      }\n    },\n    dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, i5.ɵNgNoValidate, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, InputComponent, ModalDefaultComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["CommonModule","InputComponent","FormControl","FormGroup","ReactiveFormsModule","Validators","RecoveryPasswordService","ModalDefaultComponent","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","recoveryPasswordForm","ModalRecoveryPasswordComponent","constructor","router","recoveryPasswordService","toastService","email","required","submit","recoveryPassword","value","subscribe","next","success","error","_","ɵɵdirectiveInject","i1","Router","i2","i3","ToastrService","_2","selectors","standalone","features","ɵɵProvidersFeature","ɵɵStandaloneFeature","decls","vars","consts","template","ModalRecoveryPasswordComponent_Template","rf","ctx","ɵɵlistener","ModalRecoveryPasswordComponent_Template_app_modal_default_submit_0_listener","ModalRecoveryPasswordComponent_Template_app_modal_default_closeModal_0_listener","closeModal","ɵɵtemplate","ModalRecoveryPasswordComponent_div_1_Template","isOpen","i4","NgIf","i5","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\components\\modal-recovery-password\\modal-recovery-password.component.ts","C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\components\\modal-recovery-password\\modal-recovery-password.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, Input, EventEmitter, Output  } from '@angular/core';\r\nimport { InputComponent } from '../input/input.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { RecoveryPasswordService } from 'src/app/services/recovery-password';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ModalDefaultComponent } from '../modal-default/modal-default.component';\r\n\r\ninterface RecoveryPasswordForm {\r\n  email: FormControl,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-modal-recovery-password',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, InputComponent, ModalDefaultComponent],\r\n  providers:[\r\n    RecoveryPasswordService\r\n  ],\r\n  templateUrl: './modal-recovery-password.component.html',\r\n  styleUrl: './modal-recovery-password.component.scss'\r\n})\r\nexport class ModalRecoveryPasswordComponent {\r\n  recoveryPasswordForm!: FormGroup<RecoveryPasswordForm>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private recoveryPasswordService: RecoveryPasswordService,\r\n    private toastService: ToastrService\r\n  ) {\r\n    this.recoveryPasswordForm = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n    });\r\n  }\r\n\r\n  submit(){\r\n    this.recoveryPasswordService\r\n      .recoveryPassword(this.recoveryPasswordForm.value.email).subscribe({\r\n      next: () => {\r\n        this.toastService.success(\"Email successfully sent!!\");\r\n        //this.router.navigate(['user']);\r\n      },\r\n      error: () => this.toastService.error(\"Unexpected error! Try again later\")\r\n    })\r\n  }\r\n\r\n\r\n}\r\n","<app-modal-default\r\n  title=\"Forgot your password?\"\r\n  primaryBtnText=\"cancel\"\r\n  secondaryBtnText=\"send\"\r\n  (submit)=\"submit()\"\r\n  (closeModal)=\"closeModal()\"\r\n>\r\n  <div *ngIf=\"isOpen\" class=\"custom-modal\">\r\n    <form [formGroup]=\"recoveryPasswordForm\">\r\n      <app-input\r\n        formControlName=\"email\"\r\n        inputName=\"email\"\r\n        type=\"email\"\r\n        label=\"\"\r\n        placeholder=\"email@email.com\"\r\n      >\r\n        <img src=\"/assets/svg/signup-input/mail.svg\" />\r\n      </app-input>\r\n    </form>\r\n  </div>\r\n</app-modal-default>\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAGxF,SAASC,uBAAuB,QAAQ,oCAAoC;AAG5E,SAASC,qBAAqB,QAAQ,0CAA0C;;;;;;;;;ICA1EC,EAFJ,CAAAC,cAAA,aAAyC,cACE,mBAOtC;IACCD,EAAA,CAAAE,SAAA,aAA+C;IAGrDF,EAFI,CAAAG,YAAA,EAAY,EACP,EACH;;;;IAXEH,EAAA,CAAAI,SAAA,EAAkC;IAAlCJ,EAAA,CAAAK,UAAA,cAAAC,MAAA,CAAAC,oBAAA,CAAkC;;;ADiB5C,OAAM,MAAOC,8BAA8B;EAGzCC,YACUC,MAAc,EACdC,uBAAgD,EAChDC,YAA2B;IAF3B,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,uBAAuB,GAAvBA,uBAAuB;IACvB,KAAAC,YAAY,GAAZA,YAAY;IAEpB,IAAI,CAACL,oBAAoB,GAAG,IAAIZ,SAAS,CAAC;MACxCkB,KAAK,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAE,CAACG,UAAU,CAACiB,QAAQ,EAAEjB,UAAU,CAACgB,KAAK,CAAC;KACnE,CAAC;EACJ;EAEAE,MAAMA,CAAA;IACJ,IAAI,CAACJ,uBAAuB,CACzBK,gBAAgB,CAAC,IAAI,CAACT,oBAAoB,CAACU,KAAK,CAACJ,KAAK,CAAC,CAACK,SAAS,CAAC;MACnEC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAACP,YAAY,CAACQ,OAAO,CAAC,2BAA2B,CAAC;QACtD;MACF,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAM,IAAI,CAACT,YAAY,CAACS,KAAK,CAAC,mCAAmC;KACzE,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAtBUd,8BAA8B,EAAAR,EAAA,CAAAuB,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAzB,EAAA,CAAAuB,iBAAA,CAAAG,EAAA,CAAA5B,uBAAA,GAAAE,EAAA,CAAAuB,iBAAA,CAAAI,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;UAA9BrB,8BAA8B;IAAAsB,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAhC,EAAA,CAAAiC,kBAAA,CAN/B,CACRnC,uBAAuB,CACxB,GAAAE,EAAA,CAAAkC,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCrBHxC,EAAA,CAAAC,cAAA,2BAMC;QADCD,EADA,CAAA0C,UAAA,oBAAAC,4EAAA;UAAA,OAAUF,GAAA,CAAA1B,MAAA,EAAQ;QAAA,EAAC,wBAAA6B,gFAAA;UAAA,OACLH,GAAA,CAAAI,UAAA,EAAY;QAAA,EAAC;QAE3B7C,EAAA,CAAA8C,UAAA,IAAAC,6CAAA,iBAAyC;QAa3C/C,EAAA,CAAAG,YAAA,EAAoB;;;QAbZH,EAAA,CAAAI,SAAA,EAAY;QAAZJ,EAAA,CAAAK,UAAA,SAAAoC,GAAA,CAAAO,MAAA,CAAY;;;mBDWRxD,YAAY,EAAAyD,EAAA,CAAAC,IAAA,EAAEtD,mBAAmB,EAAAuD,EAAA,CAAAC,aAAA,EAAAD,EAAA,CAAAE,eAAA,EAAAF,EAAA,CAAAG,oBAAA,EAAAH,EAAA,CAAAI,kBAAA,EAAAJ,EAAA,CAAAK,eAAA,EAAE/D,cAAc,EAAEM,qBAAqB;IAAA0D,MAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}