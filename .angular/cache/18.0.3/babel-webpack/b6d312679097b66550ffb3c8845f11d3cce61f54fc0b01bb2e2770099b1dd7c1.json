{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RecoveryPasswordService } from 'src/app/services/recovery-password';\nimport { ModalDefaultComponent } from '../modal-default/modal-default.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/recovery-password\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common\";\nfunction ModalRecoveryPasswordComponent_app_modal_default_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-modal-default\", 1);\n    i0.ɵɵlistener(\"submit\", function ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_submit_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.submit());\n    })(\"closeModal\", function ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_closeModal_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"OIEEE\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class ModalRecoveryPasswordComponent {\n  constructor(router, recoveryPasswordService, toastService) {\n    this.router = router;\n    this.recoveryPasswordService = recoveryPasswordService;\n    this.toastService = toastService;\n    this.isOpen = false;\n    this.onCloseModal = new EventEmitter();\n    this.recoveryPasswordForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email])\n    });\n  }\n  submit() {\n    this.recoveryPasswordService.recoveryPassword(this.recoveryPasswordForm.value.email).subscribe({\n      next: () => {\n        this.toastService.success(\"Email successfully sent!!\");\n        //this.router.navigate(['user']);\n      },\n      error: () => this.toastService.error(\"Unexpected error! Try again later\")\n    });\n  }\n  closeModal() {\n    this.onCloseModal.emit();\n  }\n  static #_ = this.ɵfac = function ModalRecoveryPasswordComponent_Factory(t) {\n    return new (t || ModalRecoveryPasswordComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.RecoveryPasswordService), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModalRecoveryPasswordComponent,\n    selectors: [[\"app-modal-recovery-password\"]],\n    inputs: {\n      isOpen: \"isOpen\"\n    },\n    outputs: {\n      onCloseModal: \"onCloseModal\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([RecoveryPasswordService]), i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"title\", \"Forgot your password?\", \"primaryMessageText\", \"Enter your email registered in the system to recover your password.\", \"secondaryMessageText\", \"\", \"primaryBtnText\", \"cancel\", \"secondaryBtnText\", \"send\", 3, \"submit\", \"closeModal\", 4, \"ngIf\"], [\"title\", \"Forgot your password?\", \"primaryMessageText\", \"Enter your email registered in the system to recover your password.\", \"secondaryMessageText\", \"\", \"primaryBtnText\", \"cancel\", \"secondaryBtnText\", \"send\", 3, \"submit\", \"closeModal\"]],\n    template: function ModalRecoveryPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ModalRecoveryPasswordComponent_app_modal_default_0_Template, 3, 0, \"app-modal-default\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n      }\n    },\n    dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, ModalDefaultComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["CommonModule","EventEmitter","FormControl","FormGroup","ReactiveFormsModule","Validators","RecoveryPasswordService","ModalDefaultComponent","i0","ɵɵelementStart","ɵɵlistener","ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_submit_0_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","submit","ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_closeModal_0_listener","closeModal","ɵɵtext","ɵɵelementEnd","ModalRecoveryPasswordComponent","constructor","router","recoveryPasswordService","toastService","isOpen","onCloseModal","recoveryPasswordForm","email","required","recoveryPassword","value","subscribe","next","success","error","emit","_","ɵɵdirectiveInject","i1","Router","i2","i3","ToastrService","_2","selectors","inputs","outputs","standalone","features","ɵɵProvidersFeature","ɵɵStandaloneFeature","decls","vars","consts","template","ModalRecoveryPasswordComponent_Template","rf","ctx","ɵɵtemplate","ModalRecoveryPasswordComponent_app_modal_default_0_Template","ɵɵproperty","i4","NgIf","styles"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\components\\modal-recovery-password\\modal-recovery-password.component.ts","C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\components\\modal-recovery-password\\modal-recovery-password.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, Input, EventEmitter, Output  } from '@angular/core';\r\nimport { InputComponent } from '../input/input.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { RecoveryPasswordService } from 'src/app/services/recovery-password';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ModalDefaultComponent } from '../modal-default/modal-default.component';\r\n\r\ninterface RecoveryPasswordForm {\r\n  email: FormControl,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-modal-recovery-password',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, InputComponent, ModalDefaultComponent],\r\n  providers:[\r\n    RecoveryPasswordService\r\n  ],\r\n  templateUrl: './modal-recovery-password.component.html',\r\n  styleUrl: './modal-recovery-password.component.scss'\r\n})\r\nexport class ModalRecoveryPasswordComponent {\r\n  recoveryPasswordForm!: FormGroup<RecoveryPasswordForm>;\r\n\r\n  @Input() isOpen: boolean = false;\r\n\r\n  @Output() onCloseModal = new EventEmitter<void>();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private recoveryPasswordService: RecoveryPasswordService,\r\n    private toastService: ToastrService\r\n  ) {\r\n    this.recoveryPasswordForm = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n    });\r\n  }\r\n\r\n  submit(){\r\n    this.recoveryPasswordService\r\n      .recoveryPassword(this.recoveryPasswordForm.value.email).subscribe({\r\n      next: () => {\r\n        this.toastService.success(\"Email successfully sent!!\");\r\n        //this.router.navigate(['user']);\r\n      },\r\n      error: () => this.toastService.error(\"Unexpected error! Try again later\")\r\n    })\r\n  }\r\n\r\n  closeModal() {\r\n    this.onCloseModal.emit();\r\n  }\r\n}\r\n","<app-modal-default\r\n  title=\"Forgot your password?\"\r\n  primaryMessageText=\"Enter your email registered in the system to recover your password.\"\r\n  secondaryMessageText=\"\"\r\n  primaryBtnText=\"cancel\"\r\n  secondaryBtnText=\"send\"\r\n  (submit)=\"submit()\"\r\n  (closeModal)=\"closeModal()\"\r\n  *ngIf=\"isOpen\"\r\n>\r\n   <h2>OIEEE</h2>\r\n\r\n</app-modal-default>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}