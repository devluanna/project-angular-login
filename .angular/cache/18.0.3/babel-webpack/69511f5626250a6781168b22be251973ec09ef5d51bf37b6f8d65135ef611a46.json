{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { InputComponent } from '../../components/input/input.component';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RecoveryPasswordService } from 'src/app/services/recovery-password';\nimport { ModalDefaultComponent } from '../../components/modal-default/modal-default.component';\nimport { EmailSuccessfullySentModal } from './email-successfully-sent-modal/email-successfully-sent-modal';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/recovery-password\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction ModalRecoveryPasswordComponent_app_modal_default_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-modal-default\", 1);\n    i0.ɵɵlistener(\"submit\", function ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_submit_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.submit());\n    })(\"closeModal\", function ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_closeModal_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵelementStart(1, \"form\", 2)(2, \"app-input\", 3);\n    i0.ɵɵelement(3, \"img\", 4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"app-successfully-email-modal\", 5);\n    i0.ɵɵlistener(\"onCloseModal\", function ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_successfully_email_modal_onCloseModal_4_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.recoveryPasswordForm);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"registeredEmail\", ctx_r1.registeredEmail)(\"isOpen\", ctx_r1.isModalOpen);\n  }\n}\nexport class ModalRecoveryPasswordComponent {\n  constructor(router, recoveryPasswordService, toastService) {\n    this.router = router;\n    this.recoveryPasswordService = recoveryPasswordService;\n    this.toastService = toastService;\n    this.isModalOpen = false;\n    this.registeredEmail = '';\n    this.isOpen = false;\n    this.onCloseModal = new EventEmitter();\n    this.recoveryPasswordForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email])\n    });\n  }\n  submit() {\n    this.recoveryPasswordService.recoveryPassword(this.recoveryPasswordForm.value.email).subscribe({\n      next: () => {\n        this.toastService.success(\"Email successfully sent!!\");\n        this.isModalOpen = true;\n        this.registeredEmail = this.recoveryPasswordForm.value.email;\n      },\n      error: () => this.toastService.error(\"Unexpected error! Try again later\")\n    });\n  }\n  closeModal() {\n    this.onCloseModal.emit();\n  }\n  static #_ = this.ɵfac = function ModalRecoveryPasswordComponent_Factory(t) {\n    return new (t || ModalRecoveryPasswordComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.RecoveryPasswordService), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModalRecoveryPasswordComponent,\n    selectors: [[\"app-modal-recovery-password\"]],\n    inputs: {\n      isOpen: \"isOpen\"\n    },\n    outputs: {\n      onCloseModal: \"onCloseModal\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([RecoveryPasswordService]), i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"titleModal\", \"Forgot your password?\", \"srcIcon\", \"/assets/svg/utils/information.svg\", \"primaryMessageText\", \"Enter your email registered in the system to recover your password.\", \"secondaryMessageText\", \"\", \"primaryBtnText\", \"cancel\", \"secondaryBtnText\", \"send\", 3, \"submit\", \"closeModal\", 4, \"ngIf\"], [\"titleModal\", \"Forgot your password?\", \"srcIcon\", \"/assets/svg/utils/information.svg\", \"primaryMessageText\", \"Enter your email registered in the system to recover your password.\", \"secondaryMessageText\", \"\", \"primaryBtnText\", \"cancel\", \"secondaryBtnText\", \"send\", 3, \"submit\", \"closeModal\"], [3, \"formGroup\"], [\"formControlName\", \"email\", \"inputName\", \"email\", \"type\", \"email\", \"label\", \"\", \"placeholder\", \"email@email.com\"], [\"src\", \"/assets/svg/signup-input/mail.svg\"], [3, \"onCloseModal\", \"registeredEmail\", \"isOpen\"]],\n    template: function ModalRecoveryPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ModalRecoveryPasswordComponent_app_modal_default_0_Template, 5, 3, \"app-modal-default\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n      }\n    },\n    dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, i5.ɵNgNoValidate, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, InputComponent, ModalDefaultComponent, EmailSuccessfullySentModal],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["CommonModule","EventEmitter","InputComponent","FormControl","FormGroup","ReactiveFormsModule","Validators","RecoveryPasswordService","ModalDefaultComponent","EmailSuccessfullySentModal","i0","ɵɵelementStart","ɵɵlistener","ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_submit_0_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","submit","ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_modal_default_closeModal_0_listener","closeModal","ɵɵelement","ɵɵelementEnd","ModalRecoveryPasswordComponent_app_modal_default_0_Template_app_successfully_email_modal_onCloseModal_4_listener","ɵɵadvance","ɵɵproperty","recoveryPasswordForm","registeredEmail","isModalOpen","ModalRecoveryPasswordComponent","constructor","router","recoveryPasswordService","toastService","isOpen","onCloseModal","email","required","recoveryPassword","value","subscribe","next","success","error","emit","_","ɵɵdirectiveInject","i1","Router","i2","i3","ToastrService","_2","selectors","inputs","outputs","standalone","features","ɵɵProvidersFeature","ɵɵStandaloneFeature","decls","vars","consts","template","ModalRecoveryPasswordComponent_Template","rf","ctx","ɵɵtemplate","ModalRecoveryPasswordComponent_app_modal_default_0_Template","i4","NgIf","i5","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\pages\\recovery-password\\modal-recovery-password.component.ts","C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\pages\\recovery-password\\modal-recovery-password.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, Input, EventEmitter, Output  } from '@angular/core';\r\nimport { InputComponent } from '../../components/input/input.component';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { RecoveryPasswordService } from 'src/app/services/recovery-password';\r\nimport { ModalDefaultComponent } from '../../components/modal-default/modal-default.component';\r\nimport { EmailSuccessfullySentModal } from './email-successfully-sent-modal/email-successfully-sent-modal';\r\n\r\ninterface RecoveryPasswordForm {\r\n  email: FormControl,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-modal-recovery-password',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, InputComponent, ModalDefaultComponent, EmailSuccessfullySentModal],\r\n  providers:[\r\n    RecoveryPasswordService\r\n  ],\r\n  templateUrl: './modal-recovery-password.component.html',\r\n  styleUrl: './modal-recovery-password.component.scss'\r\n})\r\nexport class ModalRecoveryPasswordComponent {\r\n  recoveryPasswordForm!: FormGroup<RecoveryPasswordForm>;\r\n  isModalOpen: boolean = false;\r\n  registeredEmail: string = '';\r\n\r\n  @Input() isOpen: boolean = false;\r\n  @Output() onCloseModal = new EventEmitter<void>();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private recoveryPasswordService: RecoveryPasswordService,\r\n    private toastService: ToastrService\r\n  ) {\r\n    this.recoveryPasswordForm = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n    });\r\n  }\r\n\r\n  submit(){\r\n    this.recoveryPasswordService\r\n      .recoveryPassword(this.recoveryPasswordForm.value.email).subscribe({\r\n      next: () => {\r\n        this.toastService.success(\"Email successfully sent!!\");\r\n        this.isModalOpen = true;\r\n        this.registeredEmail = this.recoveryPasswordForm.value.email;\r\n      },\r\n      error: () => this.toastService.error(\"Unexpected error! Try again later\")\r\n    })\r\n  }\r\n\r\n  closeModal() {\r\n    this.onCloseModal.emit();\r\n  }\r\n\r\n\r\n}\r\n","<app-modal-default\r\n  titleModal=\"Forgot your password?\"\r\n  srcIcon=\"/assets/svg/utils/information.svg\"\r\n  primaryMessageText=\"Enter your email registered in the system to recover your password.\"\r\n  secondaryMessageText=\"\"\r\n  primaryBtnText=\"cancel\"\r\n  secondaryBtnText=\"send\"\r\n  (submit)=\"submit()\"\r\n  (closeModal)=\"closeModal()\"\r\n  *ngIf=\"isOpen\"\r\n>\r\n  <form [formGroup]=\"recoveryPasswordForm\">\r\n    <app-input\r\n      formControlName=\"email\"\r\n      inputName=\"email\"\r\n      type=\"email\"\r\n      label=\"\"\r\n      placeholder=\"email@email.com\"\r\n    >\r\n      <img src=\"/assets/svg/signup-input/mail.svg\" />\r\n    </app-input>\r\n  </form>\r\n  <app-successfully-email-modal [registeredEmail]=\"registeredEmail\" [isOpen]=\"isModalOpen\" (onCloseModal)=\"closeModal()\" ></app-successfully-email-modal>\r\n</app-modal-default>\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAA2BC,YAAY,QAAiB,eAAe;AACvE,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SAASC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAGxF,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,qBAAqB,QAAQ,wDAAwD;AAC9F,SAASC,0BAA0B,QAAQ,+DAA+D;;;;;;;;;;ICR1GC,EAAA,CAAAC,cAAA,2BAUC;IAFCD,EADA,CAAAE,UAAA,oBAAAC,gGAAA;MAAAH,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAN,EAAA,CAAAO,aAAA;MAAA,OAAAP,EAAA,CAAAQ,WAAA,CAAUF,MAAA,CAAAG,MAAA,EAAQ;IAAA,EAAC,wBAAAC,oGAAA;MAAAV,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAN,EAAA,CAAAO,aAAA;MAAA,OAAAP,EAAA,CAAAQ,WAAA,CACLF,MAAA,CAAAK,UAAA,EAAY;IAAA,EAAC;IAIzBX,EADF,CAAAC,cAAA,cAAyC,mBAOtC;IACCD,EAAA,CAAAY,SAAA,aAA+C;IAEnDZ,EADE,CAAAa,YAAA,EAAY,EACP;IACPb,EAAA,CAAAC,cAAA,sCAAwH;IAA/BD,EAAA,CAAAE,UAAA,0BAAAY,iHAAA;MAAAd,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAN,EAAA,CAAAO,aAAA;MAAA,OAAAP,EAAA,CAAAQ,WAAA,CAAgBF,MAAA,CAAAK,UAAA,EAAY;IAAA,EAAC;IACxHX,EAD0H,CAAAa,YAAA,EAA+B,EACrI;;;;IAZZb,EAAA,CAAAe,SAAA,EAAkC;IAAlCf,EAAA,CAAAgB,UAAA,cAAAV,MAAA,CAAAW,oBAAA,CAAkC;IAWVjB,EAAA,CAAAe,SAAA,GAAmC;IAACf,EAApC,CAAAgB,UAAA,oBAAAV,MAAA,CAAAY,eAAA,CAAmC,WAAAZ,MAAA,CAAAa,WAAA,CAAuB;;;ADE1F,OAAM,MAAOC,8BAA8B;EAQzCC,YACUC,MAAc,EACdC,uBAAgD,EAChDC,YAA2B;IAF3B,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,uBAAuB,GAAvBA,uBAAuB;IACvB,KAAAC,YAAY,GAAZA,YAAY;IATtB,KAAAL,WAAW,GAAY,KAAK;IAC5B,KAAAD,eAAe,GAAW,EAAE;IAEnB,KAAAO,MAAM,GAAY,KAAK;IACtB,KAAAC,YAAY,GAAG,IAAInC,YAAY,EAAQ;IAO/C,IAAI,CAAC0B,oBAAoB,GAAG,IAAIvB,SAAS,CAAC;MACxCiC,KAAK,EAAE,IAAIlC,WAAW,CAAC,EAAE,EAAE,CAACG,UAAU,CAACgC,QAAQ,EAAEhC,UAAU,CAAC+B,KAAK,CAAC;KACnE,CAAC;EACJ;EAEAlB,MAAMA,CAAA;IACJ,IAAI,CAACc,uBAAuB,CACzBM,gBAAgB,CAAC,IAAI,CAACZ,oBAAoB,CAACa,KAAK,CAACH,KAAK,CAAC,CAACI,SAAS,CAAC;MACnEC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAACR,YAAY,CAACS,OAAO,CAAC,2BAA2B,CAAC;QACtD,IAAI,CAACd,WAAW,GAAG,IAAI;QACvB,IAAI,CAACD,eAAe,GAAG,IAAI,CAACD,oBAAoB,CAACa,KAAK,CAACH,KAAK;MAC9D,CAAC;MACDO,KAAK,EAAEA,CAAA,KAAM,IAAI,CAACV,YAAY,CAACU,KAAK,CAAC,mCAAmC;KACzE,CAAC;EACJ;EAEAvB,UAAUA,CAAA;IACR,IAAI,CAACe,YAAY,CAACS,IAAI,EAAE;EAC1B;EAAC,QAAAC,CAAA,G;qBAhCUhB,8BAA8B,EAAApB,EAAA,CAAAqC,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAvC,EAAA,CAAAqC,iBAAA,CAAAG,EAAA,CAAA3C,uBAAA,GAAAG,EAAA,CAAAqC,iBAAA,CAAAI,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;UAA9BvB,8BAA8B;IAAAwB,SAAA;IAAAC,MAAA;MAAApB,MAAA;IAAA;IAAAqB,OAAA;MAAApB,YAAA;IAAA;IAAAqB,UAAA;IAAAC,QAAA,GAAAhD,EAAA,CAAAiD,kBAAA,CAN/B,CACRpD,uBAAuB,CACxB,GAAAG,EAAA,CAAAkD,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCpBHxD,EAAA,CAAA0D,UAAA,IAAAC,2DAAA,+BAUC;;;QADE3D,EAAA,CAAAgB,UAAA,SAAAyC,GAAA,CAAAhC,MAAA,CAAY;;;mBDQHnC,YAAY,EAAAsE,EAAA,CAAAC,IAAA,EAAElE,mBAAmB,EAAAmE,EAAA,CAAAC,aAAA,EAAAD,EAAA,CAAAE,eAAA,EAAAF,EAAA,CAAAG,oBAAA,EAAAH,EAAA,CAAAI,kBAAA,EAAAJ,EAAA,CAAAK,eAAA,EAAE3E,cAAc,EAAEM,qBAAqB,EAAEC,0BAA0B;IAAAqE,MAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}