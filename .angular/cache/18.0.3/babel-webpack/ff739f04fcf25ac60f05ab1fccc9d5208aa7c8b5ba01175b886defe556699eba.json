{"ast":null,"code":"import { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { InputComponent } from 'src/app/components/input/input.component';\nimport { LoginService } from 'src/app/services/login-service';\nimport { identityValidator } from '../../validators/validador-indentity';\nimport { LoginLayoutComponent } from 'src/app/components/login-layout-component/login-layout.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/login-service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"src/app/services/user-service\";\nimport * as i5 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(router, loginService, toastService, userService) {\n    this.router = router;\n    this.loginService = loginService;\n    this.toastService = toastService;\n    this.userService = userService;\n    this.userSubStatus = '';\n    this.loginForm = new FormGroup({\n      identity: new FormControl('', [Validators.required, identityValidator()]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)])\n    });\n  }\n  submit() {\n    this.loginService.login(this.loginForm.value.identity, this.loginForm.value.password).subscribe({\n      next: loginResponse => {\n        this.toastService.success('Login successfully!');\n        this.router.navigate(['user']);\n        const userId = loginResponse.id_user;\n        console.log('ID TENTANDO LOGIN' + userId);\n        this.userService.getUserById(userId);\n        console.log(\"USUARIO\" + this.userService.getUserById(this.userSubStatus));\n        next: user => {\n          if (user.subStatus === 'BLOCKED') {\n            this.toastService.error('Your account is blocked!');\n            console.log('BLOQUEADO');\n          }\n        };\n      },\n      error: () => this.toastService.error('Unexpected error! Try again later')\n    });\n  }\n  // submit() {\n  //   const identity = this.loginForm.value.identity;\n  //   const password = this.loginForm.value.password;\n  //   // Realizar o login\n  //   this.loginService.login(identity, password).subscribe({\n  //     next: (loginResponse) => {\n  //       const userId = loginResponse.userId;\n  //       console.log('ID TENTANDO LOGIN' + userId);\n  //       // Verificar o substatus do usuário após o login\n  //       this.userService.getUserById(userId).subscribe({\n  //         next: (user: { subStatus: string }) => {\n  //           if (user.subStatus === 'BLOCKED') {\n  //             this.toastService.error('Your account is blocked!');\n  //             console.log('BLOQUEADO');\n  //             // Opcional: Deslogar o usuário ou tomar alguma ação adicional\n  //           } else {\n  //             this.toastService.success('Login successfully!');\n  //             this.router.navigate(['user']);\n  //           }\n  //         },\n  //         error: () =>\n  //           this.toastService.error('Unexpected error! Try again later'),\n  //       });\n  //     },\n  //     error: () => this.toastService.error('Unexpected error! Try again later'),\n  //   });\n  // }\n  navigate() {\n    this.router.navigate(['signup']);\n  }\n  setNotificationMessage() {\n    switch (this.userSubStatus) {\n      case 'BLOCKED':\n        console.log('BLOQUEADO');\n        break;\n      default:\n        break;\n    }\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.LoginService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([LoginService]), i0.ɵɵStandaloneFeature],\n    decls: 7,\n    vars: 2,\n    consts: [[\"title\", \"Welcome! Log in to your account.\", \"primaryBtnText\", \"Login Now\", \"secondaryBtnText\", \"Signup Now\", 3, \"submit\", \"navigate\", \"disablePrimaryBtn\"], [3, \"formGroup\"], [\"formControlName\", \"identity\", \"inputName\", \"identity\", \"type\", \"identity\", \"label\", \"Username\", \"placeholder\", \"your identity 234566\"], [\"src\", \"/assets/svg/username.svg\"], [\"formControlName\", \"password\", \"inputName\", \"password\", \"type\", \"password\", \"label\", \"Password\"], [\"src\", \"/assets/svg/password-user.svg\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-login-layout\", 0);\n        i0.ɵɵlistener(\"submit\", function LoginComponent_Template_app_login_layout_submit_0_listener() {\n          return ctx.submit();\n        })(\"navigate\", function LoginComponent_Template_app_login_layout_navigate_0_listener() {\n          return ctx.navigate();\n        });\n        i0.ɵɵelementStart(1, \"form\", 1)(2, \"app-input\", 2);\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"app-input\", 4);\n        i0.ɵɵelement(5, \"img\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"span\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disablePrimaryBtn\", !ctx.loginForm.valid);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      }\n    },\n    dependencies: [ReactiveFormsModule, i5.ɵNgNoValidate, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, InputComponent, LoginLayoutComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormControl","FormGroup","ReactiveFormsModule","Validators","InputComponent","LoginService","identityValidator","LoginLayoutComponent","LoginComponent","constructor","router","loginService","toastService","userService","userSubStatus","loginForm","identity","required","password","minLength","submit","login","value","subscribe","next","loginResponse","success","navigate","userId","id_user","console","log","getUserById","user","subStatus","error","setNotificationMessage","_","i0","ɵɵdirectiveInject","i1","Router","i2","i3","ToastrService","i4","UserService","_2","selectors","standalone","features","ɵɵProvidersFeature","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","LoginComponent_Template_app_login_layout_submit_0_listener","LoginComponent_Template_app_login_layout_navigate_0_listener","ɵɵelement","ɵɵelementEnd","ɵɵproperty","valid","ɵɵadvance","i5","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\pages\\login\\login.component.ts","C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\pages\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { InputComponent } from 'src/app/components/input/input.component';\r\nimport { Router } from '@angular/router';\r\nimport { LoginService } from 'src/app/services/login-service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { identityValidator } from '../../validators/validador-indentity';\r\nimport { LoginLayoutComponent } from 'src/app/components/login-layout-component/login-layout.component';\r\nimport { ModalRecoveryPasswordComponent } from 'src/app/pages/recovery-password/modal-recovery-password.component';\r\nimport { UserService } from 'src/app/services/user-service';\r\n\r\ninterface LoginForm {\r\n  identity: FormControl;\r\n  password: FormControl;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    InputComponent,\r\n    LoginLayoutComponent,\r\n    ModalRecoveryPasswordComponent,\r\n  ],\r\n  providers: [LoginService],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n})\r\nexport class LoginComponent {\r\n  loginForm!: FormGroup<LoginForm>;\r\n  userSubStatus: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private loginService: LoginService,\r\n    private toastService: ToastrService,\r\n    private userService: UserService\r\n  ) {\r\n    this.loginForm = new FormGroup({\r\n      identity: new FormControl('', [Validators.required, identityValidator()]),\r\n      password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.loginService\r\n      .login(this.loginForm.value.identity, this.loginForm.value.password)\r\n      .subscribe({\r\n        next: (loginResponse) => {\r\n          this.toastService.success('Login successfully!');\r\n          this.router.navigate(['user']);\r\n          \r\n          const userId = loginResponse.id_user;\r\n          console.log('ID TENTANDO LOGIN' + userId);\r\n\r\n          this.userService.getUserById(userId)\r\n\r\n          console.log(\"USUARIO\" + this.userService.getUserById(this.userSubStatus))\r\n          \r\n\r\n            next: (user: { subStatus: string }) => {\r\n              if (user.subStatus === 'BLOCKED') {\r\n              this.toastService.error('Your account is blocked!');\r\n             console.log('BLOQUEADO');}\r\n              }\r\n    \r\n        },\r\n        error: () =>\r\n          this.toastService.error('Unexpected error! Try again later')\r\n        ,\r\n      });\r\n  }\r\n\r\n  // submit() {\r\n  //   const identity = this.loginForm.value.identity;\r\n  //   const password = this.loginForm.value.password;\r\n\r\n  //   // Realizar o login\r\n  //   this.loginService.login(identity, password).subscribe({\r\n  //     next: (loginResponse) => {\r\n  //       const userId = loginResponse.userId;\r\n  //       console.log('ID TENTANDO LOGIN' + userId);\r\n\r\n  //       // Verificar o substatus do usuário após o login\r\n  //       this.userService.getUserById(userId).subscribe({\r\n  //         next: (user: { subStatus: string }) => {\r\n  //           if (user.subStatus === 'BLOCKED') {\r\n  //             this.toastService.error('Your account is blocked!');\r\n  //             console.log('BLOQUEADO');\r\n  //             // Opcional: Deslogar o usuário ou tomar alguma ação adicional\r\n  //           } else {\r\n  //             this.toastService.success('Login successfully!');\r\n  //             this.router.navigate(['user']);\r\n  //           }\r\n  //         },\r\n  //         error: () =>\r\n  //           this.toastService.error('Unexpected error! Try again later'),\r\n  //       });\r\n  //     },\r\n  //     error: () => this.toastService.error('Unexpected error! Try again later'),\r\n  //   });\r\n  // }\r\n\r\n  navigate() {\r\n    this.router.navigate(['signup']);\r\n  }\r\n\r\n  private setNotificationMessage(): void {\r\n    switch (this.userSubStatus) {\r\n      case 'BLOCKED':\r\n        console.log('BLOQUEADO');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n","<app-login-layout\r\n    title=\"Welcome! Log in to your account.\"\r\n    primaryBtnText=\"Login Now\"\r\n    secondaryBtnText=\"Signup Now\"\r\n    (submit)=\"submit()\"\r\n    (navigate)=\"navigate()\"\r\n    [disablePrimaryBtn]=\"!loginForm.valid\"\r\n>\r\n    <form [formGroup]=\"loginForm\">\r\n        <app-input\r\n            formControlName=\"identity\"\r\n            inputName=\"identity\"\r\n            type=\"identity\"\r\n            label=\"Username\"\r\n            placeholder=\"your identity 234566\"\r\n        >\r\n            <img src=\"/assets/svg/username.svg\"/>\r\n        </app-input>\r\n        <app-input\r\n            formControlName=\"password\"\r\n            inputName=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n        >\r\n        <img src=\"/assets/svg/password-user.svg\"/>\r\n    </app-input>\r\n    <span></span>\r\n    </form>\r\n   \r\n</app-login-layout>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}