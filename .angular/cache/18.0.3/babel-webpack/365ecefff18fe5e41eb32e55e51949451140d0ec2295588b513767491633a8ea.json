{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { DefaultLoginLayoutComponent } from 'src/app/components/default-login-layout/default-login-layout.component';\nimport { InputComponent } from 'src/app/components/input/input.component';\nimport { LoginService } from 'src/app/services/login-service';\nimport { identityValidator } from './validador-indentity';\nlet LoginComponent = class LoginComponent {\n  constructor(router, loginService, toastService) {\n    this.router = router;\n    this.loginService = loginService;\n    this.toastService = toastService;\n    this.loginForm = new FormGroup({\n      identity: new FormControl('', [Validators.required, identityValidator()]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)])\n    });\n  }\n  submit() {\n    this.loginService.login(this.loginForm.value.identity, this.loginForm.value.password).subscribe({\n      next: () => {\n        this.toastService.success(\"Login feito com sucesso!\");\n        this.router.navigate(['user']);\n      },\n      error: () => this.toastService.error(\"Erro inesperado! Tente novamente mais tarde\")\n    });\n  }\n  navigate() {\n    this.router.navigate([\"signup\"]);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [ReactiveFormsModule, InputComponent, DefaultLoginLayoutComponent],\n  providers: [LoginService],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","ReactiveFormsModule","Validators","DefaultLoginLayoutComponent","InputComponent","LoginService","identityValidator","LoginComponent","constructor","router","loginService","toastService","loginForm","identity","required","password","minLength","submit","login","value","subscribe","next","success","navigate","error","__decorate","selector","standalone","imports","providers","templateUrl","styleUrl"],"sources":["C:\\Users\\luana\\OneDrive\\√Årea de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, FormRecord, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { DefaultLoginLayoutComponent } from 'src/app/components/default-login-layout/default-login-layout.component';\r\nimport { InputComponent } from 'src/app/components/input/input.component';\r\nimport { Router } from '@angular/router';\r\nimport { LoginService } from 'src/app/services/login-service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { identityValidator } from './validador-indentity';\r\n\r\ninterface LoginForm {\r\n  identity: FormControl,\r\n  password: FormControl\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    InputComponent,\r\n    DefaultLoginLayoutComponent\r\n  ],\r\n  providers:[\r\n    LoginService\r\n  ],\r\n templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss'\r\n})\r\nexport class LoginComponent {\r\n  loginForm!: FormGroup<LoginForm>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private loginService: LoginService,\r\n    private toastService: ToastrService\r\n  ){\r\n    this.loginForm = new FormGroup({\r\n      identity: new FormControl('', [Validators.required, identityValidator()]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(6)])\r\n    })\r\n  }\r\n\r\n\r\n  submit(){\r\n    this.loginService.login(this.loginForm.value.identity, this.loginForm.value.password).subscribe({\r\n      next: () => {\r\n        this.toastService.success(\"Login feito com sucesso!\");\r\n        this.router.navigate(['user']);\r\n      },\r\n      error: () => this.toastService.error(\"Erro inesperado! Tente novamente mais tarde\")\r\n    })\r\n  }\r\n\r\n  navigate(){\r\n    this.router.navigate([\"signup\"])\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,EAAcC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AACpG,SAASC,2BAA2B,QAAQ,wEAAwE;AACpH,SAASC,cAAc,QAAQ,0CAA0C;AAEzE,SAASC,YAAY,QAAQ,gCAAgC;AAE7D,SAASC,iBAAiB,QAAQ,uBAAuB;AAqBlD,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YACUC,MAAc,EACdC,YAA0B,EAC1BC,YAA2B;IAF3B,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IAEpB,IAAI,CAACC,SAAS,GAAG,IAAIZ,SAAS,CAAC;MAC7Ba,QAAQ,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAACG,UAAU,CAACY,QAAQ,EAAER,iBAAiB,EAAE,CAAC,CAAC;MACzES,QAAQ,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAE,CAACG,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC;KAC7E,CAAC;EACJ;EAGAC,MAAMA,CAAA;IACJ,IAAI,CAACP,YAAY,CAACQ,KAAK,CAAC,IAAI,CAACN,SAAS,CAACO,KAAK,CAACN,QAAQ,EAAE,IAAI,CAACD,SAAS,CAACO,KAAK,CAACJ,QAAQ,CAAC,CAACK,SAAS,CAAC;MAC9FC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAACV,YAAY,CAACW,OAAO,CAAC,0BAA0B,CAAC;QACrD,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;MAChC,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAM,IAAI,CAACb,YAAY,CAACa,KAAK,CAAC,6CAA6C;KACnF,CAAC;EACJ;EAEAD,QAAQA,CAAA;IACN,IAAI,CAACd,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;CACD;AA5BYhB,cAAc,GAAAkB,UAAA,EAd1B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,WAAW;EACrBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACP3B,mBAAmB,EACnBG,cAAc,EACdD,2BAA2B,CAC5B;EACD0B,SAAS,EAAC,CACRxB,YAAY,CACb;EACFyB,WAAW,EAAE,wBAAwB;EACpCC,QAAQ,EAAE;CACX,CAAC,C,EACWxB,cAAc,CA4B1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}