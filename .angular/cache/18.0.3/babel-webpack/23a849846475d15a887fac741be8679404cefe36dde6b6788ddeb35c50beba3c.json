{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiUrl = \"http://localhost:8080/auth\";\n  }\n  login(identity, password) {\n    return this.httpClient.post(`${this.apiUrl}/login`, {\n      identity,\n      password\n    }).pipe(tap(value => {\n      sessionStorage.setItem(\"auth-token\", value.token);\n      sessionStorage.setItem(\"username\", value.name ? value.name : 'Nome não fornecido pelo servidor');\n      console.log(\"nome\", value.name);\n      console.log(\"token\", value.token);\n    }));\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","LoginService","constructor","httpClient","apiUrl","login","identity","password","post","pipe","value","sessionStorage","setItem","token","name","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\services\\login-service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { LoginResponse } from '../../app/types/login-response.type';\r\nimport { tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  apiUrl: string = \"http://localhost:8080/auth\";\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  login(identity: string, password: string){\r\n    return this.httpClient.post<LoginResponse>(`${this.apiUrl}/login`, { identity, password }).pipe(\r\n      tap((value) => {\r\n        sessionStorage.setItem(\"auth-token\", value.token);\r\n        sessionStorage.setItem(\"username\", value.name ? value.name : 'Nome não fornecido pelo servidor');\r\n        console.log(\"nome\", value.name);\r\n        console.log(\"token\", value.token);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,MAAM;;;AAK1B,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAF9B,KAAAC,MAAM,GAAW,4BAA4B;EAEC;EAE9CC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAgB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CAC7FT,GAAG,CAAEU,KAAK,IAAI;MACZC,cAAc,CAACC,OAAO,CAAC,YAAY,EAAEF,KAAK,CAACG,KAAK,CAAC;MACjDF,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEF,KAAK,CAACI,IAAI,GAAGJ,KAAK,CAACI,IAAI,GAAG,kCAAkC,CAAC;MAChGC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEN,KAAK,CAACI,IAAI,CAAC;MAC/BC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEN,KAAK,CAACG,KAAK,CAAC;IACnC,CAAC,CAAC,CACH;EACH;EAAC,QAAAI,CAAA,G;qBAdUhB,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZrB,YAAY;IAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}