{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nlet LoginService = class LoginService {\n  constructor(httpClient, authService // Injete o AuthService\n  ) {\n    this.httpClient = httpClient;\n    this.authService = authService;\n    this.apiUrl = \"http://localhost:8080/auth\";\n  }\n  login(identity, password) {\n    return this.httpClient.post(`${this.apiUrl}/login`, {\n      identity,\n      password\n    }).pipe(tap(response => {\n      sessionStorage.setItem(\"auth-token\", response.token);\n      sessionStorage.setItem(\"userId\", response.id_user.toString());\n      this.authService.setUser(response.first_name, response.last_name); // Armazene as informações de nome no AuthService\n      console.log(\"token\", response.token);\n      console.log(\"id_user\", response.id_user);\n    }));\n  }\n};\nLoginService = __decorate([Injectable({\n  providedIn: 'root'\n})], LoginService);\nexport { LoginService };","map":{"version":3,"names":["Injectable","tap","LoginService","constructor","httpClient","authService","apiUrl","login","identity","password","post","pipe","response","sessionStorage","setItem","token","id_user","toString","setUser","first_name","last_name","console","log","__decorate","providedIn"],"sources":["C:\\Users\\luana\\OneDrive\\Área de Trabalho\\Lua\\project-angular-login\\project-angular-login\\src\\app\\services\\login-service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  apiUrl: string = \"http://localhost:8080/auth\";\r\n\r\n  constructor(private httpClient: HttpClient,\r\n    private authService: AuthService // Injete o AuthService\r\n  ) { }\r\n\r\n  login(identity: string, password: string){\r\n    return this.httpClient.post<any>(`${this.apiUrl}/login`, { identity, password }).pipe(\r\n      tap((response) => {\r\n        sessionStorage.setItem(\"auth-token\", response.token);\r\n        sessionStorage.setItem(\"userId\", response.id_user.toString());\r\n        this.authService.setUser(response.first_name, response.last_name); // Armazene as informações de nome no AuthService\r\n        console.log(\"token\", response.token);\r\n        console.log(\"id_user\", response.id_user);\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,GAAG,QAAQ,MAAM;AAKnB,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAGvBC,YAAoBC,UAAsB,EAChCC,WAAwB,CAAC;EAAA,E;IADf,KAAAD,UAAU,GAAVA,UAAU;IACpB,KAAAC,WAAW,GAAXA,WAAW;IAHrB,KAAAC,MAAM,GAAW,4BAA4B;EAIzC;EAEJC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAAM,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACnFV,GAAG,CAAEW,QAAQ,IAAI;MACfC,cAAc,CAACC,OAAO,CAAC,YAAY,EAAEF,QAAQ,CAACG,KAAK,CAAC;MACpDF,cAAc,CAACC,OAAO,CAAC,QAAQ,EAAEF,QAAQ,CAACI,OAAO,CAACC,QAAQ,EAAE,CAAC;MAC7D,IAAI,CAACZ,WAAW,CAACa,OAAO,CAACN,QAAQ,CAACO,UAAU,EAAEP,QAAQ,CAACQ,SAAS,CAAC,CAAC,CAAC;MACnEC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEV,QAAQ,CAACG,KAAK,CAAC;MACpCM,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEV,QAAQ,CAACI,OAAO,CAAC;IAC1C,CAAC,CAAC,CACH;EACH;CACD;AAlBYd,YAAY,GAAAqB,UAAA,EAHxBvB,UAAU,CAAC;EACVwB,UAAU,EAAE;CACb,CAAC,C,EACWtB,YAAY,CAkBxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}